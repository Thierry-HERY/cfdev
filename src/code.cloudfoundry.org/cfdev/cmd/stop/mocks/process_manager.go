// Code generated by MockGen. DO NOT EDIT.
// Source: code.cloudfoundry.org/cfdev/cmd/stop (interfaces: ProcManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProcManager is a mock of ProcManager interface
type MockProcManager struct {
	ctrl     *gomock.Controller
	recorder *MockProcManagerMockRecorder
}

// MockProcManagerMockRecorder is the mock recorder for MockProcManager
type MockProcManagerMockRecorder struct {
	mock *MockProcManager
}

// NewMockProcManager creates a new mock instance
func NewMockProcManager(ctrl *gomock.Controller) *MockProcManager {
	mock := &MockProcManager{ctrl: ctrl}
	mock.recorder = &MockProcManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcManager) EXPECT() *MockProcManagerMockRecorder {
	return m.recorder
}

// SafeKill mocks base method
func (m *MockProcManager) SafeKill(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "SafeKill", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SafeKill indicates an expected call of SafeKill
func (mr *MockProcManagerMockRecorder) SafeKill(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SafeKill", reflect.TypeOf((*MockProcManager)(nil).SafeKill), arg0, arg1)
}
