// Code generated by MockGen. DO NOT EDIT.
// Source: code.cloudfoundry.org/cfdev/cmd/start (interfaces: Vpnkit)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVpnkit is a mock of Vpnkit interface
type MockVpnkit struct {
	ctrl     *gomock.Controller
	recorder *MockVpnkitMockRecorder
}

// MockVpnkitMockRecorder is the mock recorder for MockVpnkit
type MockVpnkitMockRecorder struct {
	mock *MockVpnkit
}

// NewMockVpnkit creates a new mock instance
func NewMockVpnkit(ctrl *gomock.Controller) *MockVpnkit {
	mock := &MockVpnkit{ctrl: ctrl}
	mock.recorder = &MockVpnkitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVpnkit) EXPECT() *MockVpnkitMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockVpnkit) Start() error {
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockVpnkitMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockVpnkit)(nil).Start))
}

// Stop mocks base method
func (m *MockVpnkit) Stop() {
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockVpnkitMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockVpnkit)(nil).Stop))
}

// Watch mocks base method
func (m *MockVpnkit) Watch(arg0 chan string) {
	m.ctrl.Call(m, "Watch", arg0)
}

// Watch indicates an expected call of Watch
func (mr *MockVpnkitMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockVpnkit)(nil).Watch), arg0)
}
