// Code generated by MockGen. DO NOT EDIT.
// Source: code.cloudfoundry.org/cfdev/cmd/start (interfaces: Linuxkit)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLinuxkit is a mock of Linuxkit interface
type MockLinuxkit struct {
	ctrl     *gomock.Controller
	recorder *MockLinuxkitMockRecorder
}

// MockLinuxkitMockRecorder is the mock recorder for MockLinuxkit
type MockLinuxkitMockRecorder struct {
	mock *MockLinuxkit
}

// NewMockLinuxkit creates a new mock instance
func NewMockLinuxkit(ctrl *gomock.Controller) *MockLinuxkit {
	mock := &MockLinuxkit{ctrl: ctrl}
	mock.recorder = &MockLinuxkitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLinuxkit) EXPECT() *MockLinuxkitMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockLinuxkit) Start(arg0, arg1 int) error {
	ret := m.ctrl.Call(m, "Start", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockLinuxkitMockRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockLinuxkit)(nil).Start), arg0, arg1)
}

// Stop mocks base method
func (m *MockLinuxkit) Stop() {
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockLinuxkitMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockLinuxkit)(nil).Stop))
}

// Watch mocks base method
func (m *MockLinuxkit) Watch(arg0 chan string) {
	m.ctrl.Call(m, "Watch", arg0)
}

// Watch indicates an expected call of Watch
func (mr *MockLinuxkitMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockLinuxkit)(nil).Watch), arg0)
}
