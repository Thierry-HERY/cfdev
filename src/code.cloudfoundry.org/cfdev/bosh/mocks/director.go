// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudfoundry/bosh-cli/director (interfaces: Director)

// Package mocks is a generated GoMock package.
package mocks

import (
	director "github.com/cloudfoundry/bosh-cli/director"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockDirector is a mock of Director interface
type MockDirector struct {
	ctrl     *gomock.Controller
	recorder *MockDirectorMockRecorder
}

// MockDirectorMockRecorder is the mock recorder for MockDirector
type MockDirectorMockRecorder struct {
	mock *MockDirector
}

// NewMockDirector creates a new mock instance
func NewMockDirector(ctrl *gomock.Controller) *MockDirector {
	mock := &MockDirector{ctrl: ctrl}
	mock.recorder = &MockDirectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDirector) EXPECT() *MockDirectorMockRecorder {
	return m.recorder
}

// CleanUp mocks base method
func (m *MockDirector) CleanUp(arg0 bool) error {
	ret := m.ctrl.Call(m, "CleanUp", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanUp indicates an expected call of CleanUp
func (mr *MockDirectorMockRecorder) CleanUp(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUp", reflect.TypeOf((*MockDirector)(nil).CleanUp), arg0)
}

// CurrentTasks mocks base method
func (m *MockDirector) CurrentTasks(arg0 director.TasksFilter) ([]director.Task, error) {
	ret := m.ctrl.Call(m, "CurrentTasks", arg0)
	ret0, _ := ret[0].([]director.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentTasks indicates an expected call of CurrentTasks
func (mr *MockDirectorMockRecorder) CurrentTasks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentTasks", reflect.TypeOf((*MockDirector)(nil).CurrentTasks), arg0)
}

// DeleteConfig mocks base method
func (m *MockDirector) DeleteConfig(arg0, arg1 string) (bool, error) {
	ret := m.ctrl.Call(m, "DeleteConfig", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfig indicates an expected call of DeleteConfig
func (mr *MockDirectorMockRecorder) DeleteConfig(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfig", reflect.TypeOf((*MockDirector)(nil).DeleteConfig), arg0, arg1)
}

// DeleteConfigByID mocks base method
func (m *MockDirector) DeleteConfigByID(arg0 string) (bool, error) {
	ret := m.ctrl.Call(m, "DeleteConfigByID", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigByID indicates an expected call of DeleteConfigByID
func (mr *MockDirectorMockRecorder) DeleteConfigByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigByID", reflect.TypeOf((*MockDirector)(nil).DeleteConfigByID), arg0)
}

// Deployments mocks base method
func (m *MockDirector) Deployments() ([]director.Deployment, error) {
	ret := m.ctrl.Call(m, "Deployments")
	ret0, _ := ret[0].([]director.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deployments indicates an expected call of Deployments
func (mr *MockDirectorMockRecorder) Deployments() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deployments", reflect.TypeOf((*MockDirector)(nil).Deployments))
}

// DiffCPIConfig mocks base method
func (m *MockDirector) DiffCPIConfig(arg0 []byte, arg1 bool) (director.ConfigDiff, error) {
	ret := m.ctrl.Call(m, "DiffCPIConfig", arg0, arg1)
	ret0, _ := ret[0].(director.ConfigDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiffCPIConfig indicates an expected call of DiffCPIConfig
func (mr *MockDirectorMockRecorder) DiffCPIConfig(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiffCPIConfig", reflect.TypeOf((*MockDirector)(nil).DiffCPIConfig), arg0, arg1)
}

// DiffCloudConfig mocks base method
func (m *MockDirector) DiffCloudConfig(arg0 []byte) (director.ConfigDiff, error) {
	ret := m.ctrl.Call(m, "DiffCloudConfig", arg0)
	ret0, _ := ret[0].(director.ConfigDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiffCloudConfig indicates an expected call of DiffCloudConfig
func (mr *MockDirectorMockRecorder) DiffCloudConfig(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiffCloudConfig", reflect.TypeOf((*MockDirector)(nil).DiffCloudConfig), arg0)
}

// DiffConfig mocks base method
func (m *MockDirector) DiffConfig(arg0, arg1 string, arg2 []byte) (director.ConfigDiff, error) {
	ret := m.ctrl.Call(m, "DiffConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(director.ConfigDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiffConfig indicates an expected call of DiffConfig
func (mr *MockDirectorMockRecorder) DiffConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiffConfig", reflect.TypeOf((*MockDirector)(nil).DiffConfig), arg0, arg1, arg2)
}

// DiffConfigByIDOrContent mocks base method
func (m *MockDirector) DiffConfigByIDOrContent(arg0 string, arg1 []byte, arg2 string, arg3 []byte) (director.ConfigDiff, error) {
	ret := m.ctrl.Call(m, "DiffConfigByIDOrContent", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(director.ConfigDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiffConfigByIDOrContent indicates an expected call of DiffConfigByIDOrContent
func (mr *MockDirectorMockRecorder) DiffConfigByIDOrContent(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiffConfigByIDOrContent", reflect.TypeOf((*MockDirector)(nil).DiffConfigByIDOrContent), arg0, arg1, arg2, arg3)
}

// DiffRuntimeConfig mocks base method
func (m *MockDirector) DiffRuntimeConfig(arg0 string, arg1 []byte, arg2 bool) (director.ConfigDiff, error) {
	ret := m.ctrl.Call(m, "DiffRuntimeConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(director.ConfigDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiffRuntimeConfig indicates an expected call of DiffRuntimeConfig
func (mr *MockDirectorMockRecorder) DiffRuntimeConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiffRuntimeConfig", reflect.TypeOf((*MockDirector)(nil).DiffRuntimeConfig), arg0, arg1, arg2)
}

// DownloadResourceUnchecked mocks base method
func (m *MockDirector) DownloadResourceUnchecked(arg0 string, arg1 io.Writer) error {
	ret := m.ctrl.Call(m, "DownloadResourceUnchecked", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadResourceUnchecked indicates an expected call of DownloadResourceUnchecked
func (mr *MockDirectorMockRecorder) DownloadResourceUnchecked(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadResourceUnchecked", reflect.TypeOf((*MockDirector)(nil).DownloadResourceUnchecked), arg0, arg1)
}

// EnableResurrection mocks base method
func (m *MockDirector) EnableResurrection(arg0 bool) error {
	ret := m.ctrl.Call(m, "EnableResurrection", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableResurrection indicates an expected call of EnableResurrection
func (mr *MockDirectorMockRecorder) EnableResurrection(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableResurrection", reflect.TypeOf((*MockDirector)(nil).EnableResurrection), arg0)
}

// Event mocks base method
func (m *MockDirector) Event(arg0 string) (director.Event, error) {
	ret := m.ctrl.Call(m, "Event", arg0)
	ret0, _ := ret[0].(director.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Event indicates an expected call of Event
func (mr *MockDirectorMockRecorder) Event(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockDirector)(nil).Event), arg0)
}

// Events mocks base method
func (m *MockDirector) Events(arg0 director.EventsFilter) ([]director.Event, error) {
	ret := m.ctrl.Call(m, "Events", arg0)
	ret0, _ := ret[0].([]director.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Events indicates an expected call of Events
func (mr *MockDirectorMockRecorder) Events(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockDirector)(nil).Events), arg0)
}

// FindDeployment mocks base method
func (m *MockDirector) FindDeployment(arg0 string) (director.Deployment, error) {
	ret := m.ctrl.Call(m, "FindDeployment", arg0)
	ret0, _ := ret[0].(director.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDeployment indicates an expected call of FindDeployment
func (mr *MockDirectorMockRecorder) FindDeployment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeployment", reflect.TypeOf((*MockDirector)(nil).FindDeployment), arg0)
}

// FindOrphanDisk mocks base method
func (m *MockDirector) FindOrphanDisk(arg0 string) (director.OrphanDisk, error) {
	ret := m.ctrl.Call(m, "FindOrphanDisk", arg0)
	ret0, _ := ret[0].(director.OrphanDisk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrphanDisk indicates an expected call of FindOrphanDisk
func (mr *MockDirectorMockRecorder) FindOrphanDisk(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrphanDisk", reflect.TypeOf((*MockDirector)(nil).FindOrphanDisk), arg0)
}

// FindRelease mocks base method
func (m *MockDirector) FindRelease(arg0 director.ReleaseSlug) (director.Release, error) {
	ret := m.ctrl.Call(m, "FindRelease", arg0)
	ret0, _ := ret[0].(director.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRelease indicates an expected call of FindRelease
func (mr *MockDirectorMockRecorder) FindRelease(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRelease", reflect.TypeOf((*MockDirector)(nil).FindRelease), arg0)
}

// FindReleaseSeries mocks base method
func (m *MockDirector) FindReleaseSeries(arg0 director.ReleaseSeriesSlug) (director.ReleaseSeries, error) {
	ret := m.ctrl.Call(m, "FindReleaseSeries", arg0)
	ret0, _ := ret[0].(director.ReleaseSeries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReleaseSeries indicates an expected call of FindReleaseSeries
func (mr *MockDirectorMockRecorder) FindReleaseSeries(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReleaseSeries", reflect.TypeOf((*MockDirector)(nil).FindReleaseSeries), arg0)
}

// FindStemcell mocks base method
func (m *MockDirector) FindStemcell(arg0 director.StemcellSlug) (director.Stemcell, error) {
	ret := m.ctrl.Call(m, "FindStemcell", arg0)
	ret0, _ := ret[0].(director.Stemcell)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStemcell indicates an expected call of FindStemcell
func (mr *MockDirectorMockRecorder) FindStemcell(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStemcell", reflect.TypeOf((*MockDirector)(nil).FindStemcell), arg0)
}

// FindTask mocks base method
func (m *MockDirector) FindTask(arg0 int) (director.Task, error) {
	ret := m.ctrl.Call(m, "FindTask", arg0)
	ret0, _ := ret[0].(director.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTask indicates an expected call of FindTask
func (mr *MockDirectorMockRecorder) FindTask(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTask", reflect.TypeOf((*MockDirector)(nil).FindTask), arg0)
}

// FindTasksByContextId mocks base method
func (m *MockDirector) FindTasksByContextId(arg0 string) ([]director.Task, error) {
	ret := m.ctrl.Call(m, "FindTasksByContextId", arg0)
	ret0, _ := ret[0].([]director.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTasksByContextId indicates an expected call of FindTasksByContextId
func (mr *MockDirectorMockRecorder) FindTasksByContextId(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTasksByContextId", reflect.TypeOf((*MockDirector)(nil).FindTasksByContextId), arg0)
}

// HasRelease mocks base method
func (m *MockDirector) HasRelease(arg0, arg1 string, arg2 director.OSVersionSlug) (bool, error) {
	ret := m.ctrl.Call(m, "HasRelease", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasRelease indicates an expected call of HasRelease
func (mr *MockDirectorMockRecorder) HasRelease(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRelease", reflect.TypeOf((*MockDirector)(nil).HasRelease), arg0, arg1, arg2)
}

// HasStemcell mocks base method
func (m *MockDirector) HasStemcell(arg0, arg1 string) (bool, error) {
	ret := m.ctrl.Call(m, "HasStemcell", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasStemcell indicates an expected call of HasStemcell
func (mr *MockDirectorMockRecorder) HasStemcell(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasStemcell", reflect.TypeOf((*MockDirector)(nil).HasStemcell), arg0, arg1)
}

// Info mocks base method
func (m *MockDirector) Info() (director.Info, error) {
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(director.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info
func (mr *MockDirectorMockRecorder) Info() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockDirector)(nil).Info))
}

// IsAuthenticated mocks base method
func (m *MockDirector) IsAuthenticated() (bool, error) {
	ret := m.ctrl.Call(m, "IsAuthenticated")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAuthenticated indicates an expected call of IsAuthenticated
func (mr *MockDirectorMockRecorder) IsAuthenticated() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthenticated", reflect.TypeOf((*MockDirector)(nil).IsAuthenticated))
}

// LatestCPIConfig mocks base method
func (m *MockDirector) LatestCPIConfig() (director.CPIConfig, error) {
	ret := m.ctrl.Call(m, "LatestCPIConfig")
	ret0, _ := ret[0].(director.CPIConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestCPIConfig indicates an expected call of LatestCPIConfig
func (mr *MockDirectorMockRecorder) LatestCPIConfig() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestCPIConfig", reflect.TypeOf((*MockDirector)(nil).LatestCPIConfig))
}

// LatestCloudConfig mocks base method
func (m *MockDirector) LatestCloudConfig() (director.CloudConfig, error) {
	ret := m.ctrl.Call(m, "LatestCloudConfig")
	ret0, _ := ret[0].(director.CloudConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestCloudConfig indicates an expected call of LatestCloudConfig
func (mr *MockDirectorMockRecorder) LatestCloudConfig() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestCloudConfig", reflect.TypeOf((*MockDirector)(nil).LatestCloudConfig))
}

// LatestConfig mocks base method
func (m *MockDirector) LatestConfig(arg0, arg1 string) (director.Config, error) {
	ret := m.ctrl.Call(m, "LatestConfig", arg0, arg1)
	ret0, _ := ret[0].(director.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestConfig indicates an expected call of LatestConfig
func (mr *MockDirectorMockRecorder) LatestConfig(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestConfig", reflect.TypeOf((*MockDirector)(nil).LatestConfig), arg0, arg1)
}

// LatestConfigByID mocks base method
func (m *MockDirector) LatestConfigByID(arg0 string) (director.Config, error) {
	ret := m.ctrl.Call(m, "LatestConfigByID", arg0)
	ret0, _ := ret[0].(director.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestConfigByID indicates an expected call of LatestConfigByID
func (mr *MockDirectorMockRecorder) LatestConfigByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestConfigByID", reflect.TypeOf((*MockDirector)(nil).LatestConfigByID), arg0)
}

// LatestRuntimeConfig mocks base method
func (m *MockDirector) LatestRuntimeConfig(arg0 string) (director.RuntimeConfig, error) {
	ret := m.ctrl.Call(m, "LatestRuntimeConfig", arg0)
	ret0, _ := ret[0].(director.RuntimeConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestRuntimeConfig indicates an expected call of LatestRuntimeConfig
func (mr *MockDirectorMockRecorder) LatestRuntimeConfig(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestRuntimeConfig", reflect.TypeOf((*MockDirector)(nil).LatestRuntimeConfig), arg0)
}

// ListConfigs mocks base method
func (m *MockDirector) ListConfigs(arg0 int, arg1 director.ConfigsFilter) ([]director.Config, error) {
	ret := m.ctrl.Call(m, "ListConfigs", arg0, arg1)
	ret0, _ := ret[0].([]director.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigs indicates an expected call of ListConfigs
func (mr *MockDirectorMockRecorder) ListConfigs(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigs", reflect.TypeOf((*MockDirector)(nil).ListConfigs), arg0, arg1)
}

// Locks mocks base method
func (m *MockDirector) Locks() ([]director.Lock, error) {
	ret := m.ctrl.Call(m, "Locks")
	ret0, _ := ret[0].([]director.Lock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Locks indicates an expected call of Locks
func (mr *MockDirectorMockRecorder) Locks() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locks", reflect.TypeOf((*MockDirector)(nil).Locks))
}

// MatchPackages mocks base method
func (m *MockDirector) MatchPackages(arg0 interface{}, arg1 bool) ([]string, error) {
	ret := m.ctrl.Call(m, "MatchPackages", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchPackages indicates an expected call of MatchPackages
func (mr *MockDirectorMockRecorder) MatchPackages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchPackages", reflect.TypeOf((*MockDirector)(nil).MatchPackages), arg0, arg1)
}

// OrphanDisk mocks base method
func (m *MockDirector) OrphanDisk(arg0 string) error {
	ret := m.ctrl.Call(m, "OrphanDisk", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrphanDisk indicates an expected call of OrphanDisk
func (mr *MockDirectorMockRecorder) OrphanDisk(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrphanDisk", reflect.TypeOf((*MockDirector)(nil).OrphanDisk), arg0)
}

// OrphanDisks mocks base method
func (m *MockDirector) OrphanDisks() ([]director.OrphanDisk, error) {
	ret := m.ctrl.Call(m, "OrphanDisks")
	ret0, _ := ret[0].([]director.OrphanDisk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrphanDisks indicates an expected call of OrphanDisks
func (mr *MockDirectorMockRecorder) OrphanDisks() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrphanDisks", reflect.TypeOf((*MockDirector)(nil).OrphanDisks))
}

// OrphanedVMs mocks base method
func (m *MockDirector) OrphanedVMs() ([]director.OrphanedVM, error) {
	ret := m.ctrl.Call(m, "OrphanedVMs")
	ret0, _ := ret[0].([]director.OrphanedVM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrphanedVMs indicates an expected call of OrphanedVMs
func (mr *MockDirectorMockRecorder) OrphanedVMs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrphanedVMs", reflect.TypeOf((*MockDirector)(nil).OrphanedVMs))
}

// RecentTasks mocks base method
func (m *MockDirector) RecentTasks(arg0 int, arg1 director.TasksFilter) ([]director.Task, error) {
	ret := m.ctrl.Call(m, "RecentTasks", arg0, arg1)
	ret0, _ := ret[0].([]director.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecentTasks indicates an expected call of RecentTasks
func (mr *MockDirectorMockRecorder) RecentTasks(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecentTasks", reflect.TypeOf((*MockDirector)(nil).RecentTasks), arg0, arg1)
}

// Releases mocks base method
func (m *MockDirector) Releases() ([]director.Release, error) {
	ret := m.ctrl.Call(m, "Releases")
	ret0, _ := ret[0].([]director.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Releases indicates an expected call of Releases
func (mr *MockDirectorMockRecorder) Releases() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Releases", reflect.TypeOf((*MockDirector)(nil).Releases))
}

// StemcellNeedsUpload mocks base method
func (m *MockDirector) StemcellNeedsUpload(arg0 director.StemcellInfo) (bool, bool, error) {
	ret := m.ctrl.Call(m, "StemcellNeedsUpload", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StemcellNeedsUpload indicates an expected call of StemcellNeedsUpload
func (mr *MockDirectorMockRecorder) StemcellNeedsUpload(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StemcellNeedsUpload", reflect.TypeOf((*MockDirector)(nil).StemcellNeedsUpload), arg0)
}

// Stemcells mocks base method
func (m *MockDirector) Stemcells() ([]director.Stemcell, error) {
	ret := m.ctrl.Call(m, "Stemcells")
	ret0, _ := ret[0].([]director.Stemcell)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stemcells indicates an expected call of Stemcells
func (mr *MockDirectorMockRecorder) Stemcells() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stemcells", reflect.TypeOf((*MockDirector)(nil).Stemcells))
}

// UpdateCPIConfig mocks base method
func (m *MockDirector) UpdateCPIConfig(arg0 []byte) error {
	ret := m.ctrl.Call(m, "UpdateCPIConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCPIConfig indicates an expected call of UpdateCPIConfig
func (mr *MockDirectorMockRecorder) UpdateCPIConfig(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCPIConfig", reflect.TypeOf((*MockDirector)(nil).UpdateCPIConfig), arg0)
}

// UpdateCloudConfig mocks base method
func (m *MockDirector) UpdateCloudConfig(arg0 []byte) error {
	ret := m.ctrl.Call(m, "UpdateCloudConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloudConfig indicates an expected call of UpdateCloudConfig
func (mr *MockDirectorMockRecorder) UpdateCloudConfig(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudConfig", reflect.TypeOf((*MockDirector)(nil).UpdateCloudConfig), arg0)
}

// UpdateConfig mocks base method
func (m *MockDirector) UpdateConfig(arg0, arg1, arg2 string, arg3 []byte) (director.Config, error) {
	ret := m.ctrl.Call(m, "UpdateConfig", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(director.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfig indicates an expected call of UpdateConfig
func (mr *MockDirectorMockRecorder) UpdateConfig(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockDirector)(nil).UpdateConfig), arg0, arg1, arg2, arg3)
}

// UpdateRuntimeConfig mocks base method
func (m *MockDirector) UpdateRuntimeConfig(arg0 string, arg1 []byte) error {
	ret := m.ctrl.Call(m, "UpdateRuntimeConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRuntimeConfig indicates an expected call of UpdateRuntimeConfig
func (mr *MockDirectorMockRecorder) UpdateRuntimeConfig(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuntimeConfig", reflect.TypeOf((*MockDirector)(nil).UpdateRuntimeConfig), arg0, arg1)
}

// UploadReleaseFile mocks base method
func (m *MockDirector) UploadReleaseFile(arg0 director.UploadFile, arg1, arg2 bool) error {
	ret := m.ctrl.Call(m, "UploadReleaseFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadReleaseFile indicates an expected call of UploadReleaseFile
func (mr *MockDirectorMockRecorder) UploadReleaseFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadReleaseFile", reflect.TypeOf((*MockDirector)(nil).UploadReleaseFile), arg0, arg1, arg2)
}

// UploadReleaseURL mocks base method
func (m *MockDirector) UploadReleaseURL(arg0, arg1 string, arg2, arg3 bool) error {
	ret := m.ctrl.Call(m, "UploadReleaseURL", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadReleaseURL indicates an expected call of UploadReleaseURL
func (mr *MockDirectorMockRecorder) UploadReleaseURL(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadReleaseURL", reflect.TypeOf((*MockDirector)(nil).UploadReleaseURL), arg0, arg1, arg2, arg3)
}

// UploadStemcellFile mocks base method
func (m *MockDirector) UploadStemcellFile(arg0 director.UploadFile, arg1 bool) error {
	ret := m.ctrl.Call(m, "UploadStemcellFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadStemcellFile indicates an expected call of UploadStemcellFile
func (mr *MockDirectorMockRecorder) UploadStemcellFile(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadStemcellFile", reflect.TypeOf((*MockDirector)(nil).UploadStemcellFile), arg0, arg1)
}

// UploadStemcellURL mocks base method
func (m *MockDirector) UploadStemcellURL(arg0, arg1 string, arg2 bool) error {
	ret := m.ctrl.Call(m, "UploadStemcellURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadStemcellURL indicates an expected call of UploadStemcellURL
func (mr *MockDirectorMockRecorder) UploadStemcellURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadStemcellURL", reflect.TypeOf((*MockDirector)(nil).UploadStemcellURL), arg0, arg1, arg2)
}

// WithContext mocks base method
func (m *MockDirector) WithContext(arg0 string) director.Director {
	ret := m.ctrl.Call(m, "WithContext", arg0)
	ret0, _ := ret[0].(director.Director)
	return ret0
}

// WithContext indicates an expected call of WithContext
func (mr *MockDirectorMockRecorder) WithContext(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockDirector)(nil).WithContext), arg0)
}
