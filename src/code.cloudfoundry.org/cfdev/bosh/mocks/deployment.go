// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudfoundry/bosh-cli/director (interfaces: Deployment)

// Package mocks is a generated GoMock package.
package mocks

import (
	director "github.com/cloudfoundry/bosh-cli/director"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDeployment is a mock of Deployment interface
type MockDeployment struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentMockRecorder
}

// MockDeploymentMockRecorder is the mock recorder for MockDeployment
type MockDeploymentMockRecorder struct {
	mock *MockDeployment
}

// NewMockDeployment creates a new mock instance
func NewMockDeployment(ctrl *gomock.Controller) *MockDeployment {
	mock := &MockDeployment{ctrl: ctrl}
	mock.recorder = &MockDeploymentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeployment) EXPECT() *MockDeploymentMockRecorder {
	return m.recorder
}

// AttachDisk mocks base method
func (m *MockDeployment) AttachDisk(arg0 director.InstanceSlug, arg1 string) error {
	ret := m.ctrl.Call(m, "AttachDisk", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachDisk indicates an expected call of AttachDisk
func (mr *MockDeploymentMockRecorder) AttachDisk(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachDisk", reflect.TypeOf((*MockDeployment)(nil).AttachDisk), arg0, arg1)
}

// CleanUpSSH mocks base method
func (m *MockDeployment) CleanUpSSH(arg0 director.AllOrInstanceGroupOrInstanceSlug, arg1 director.SSHOpts) error {
	ret := m.ctrl.Call(m, "CleanUpSSH", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanUpSSH indicates an expected call of CleanUpSSH
func (mr *MockDeploymentMockRecorder) CleanUpSSH(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUpSSH", reflect.TypeOf((*MockDeployment)(nil).CleanUpSSH), arg0, arg1)
}

// CloudConfig mocks base method
func (m *MockDeployment) CloudConfig() (string, error) {
	ret := m.ctrl.Call(m, "CloudConfig")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudConfig indicates an expected call of CloudConfig
func (mr *MockDeploymentMockRecorder) CloudConfig() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudConfig", reflect.TypeOf((*MockDeployment)(nil).CloudConfig))
}

// Delete mocks base method
func (m *MockDeployment) Delete(arg0 bool) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDeploymentMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeployment)(nil).Delete), arg0)
}

// DeleteSnapshot mocks base method
func (m *MockDeployment) DeleteSnapshot(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteSnapshot", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot
func (mr *MockDeploymentMockRecorder) DeleteSnapshot(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockDeployment)(nil).DeleteSnapshot), arg0)
}

// DeleteSnapshots mocks base method
func (m *MockDeployment) DeleteSnapshots() error {
	ret := m.ctrl.Call(m, "DeleteSnapshots")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshots indicates an expected call of DeleteSnapshots
func (mr *MockDeploymentMockRecorder) DeleteSnapshots() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshots", reflect.TypeOf((*MockDeployment)(nil).DeleteSnapshots))
}

// DeleteVM mocks base method
func (m *MockDeployment) DeleteVM(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteVM", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVM indicates an expected call of DeleteVM
func (mr *MockDeploymentMockRecorder) DeleteVM(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVM", reflect.TypeOf((*MockDeployment)(nil).DeleteVM), arg0)
}

// Diff mocks base method
func (m *MockDeployment) Diff(arg0 []byte, arg1 bool) (director.DeploymentDiff, error) {
	ret := m.ctrl.Call(m, "Diff", arg0, arg1)
	ret0, _ := ret[0].(director.DeploymentDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Diff indicates an expected call of Diff
func (mr *MockDeploymentMockRecorder) Diff(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Diff", reflect.TypeOf((*MockDeployment)(nil).Diff), arg0, arg1)
}

// EnableResurrection mocks base method
func (m *MockDeployment) EnableResurrection(arg0 director.InstanceSlug, arg1 bool) error {
	ret := m.ctrl.Call(m, "EnableResurrection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableResurrection indicates an expected call of EnableResurrection
func (mr *MockDeploymentMockRecorder) EnableResurrection(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableResurrection", reflect.TypeOf((*MockDeployment)(nil).EnableResurrection), arg0, arg1)
}

// Errands mocks base method
func (m *MockDeployment) Errands() ([]director.Errand, error) {
	ret := m.ctrl.Call(m, "Errands")
	ret0, _ := ret[0].([]director.Errand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Errands indicates an expected call of Errands
func (mr *MockDeploymentMockRecorder) Errands() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errands", reflect.TypeOf((*MockDeployment)(nil).Errands))
}

// ExportRelease mocks base method
func (m *MockDeployment) ExportRelease(arg0 director.ReleaseSlug, arg1 director.OSVersionSlug, arg2 []string) (director.ExportReleaseResult, error) {
	ret := m.ctrl.Call(m, "ExportRelease", arg0, arg1, arg2)
	ret0, _ := ret[0].(director.ExportReleaseResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportRelease indicates an expected call of ExportRelease
func (mr *MockDeploymentMockRecorder) ExportRelease(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRelease", reflect.TypeOf((*MockDeployment)(nil).ExportRelease), arg0, arg1, arg2)
}

// FetchLogs mocks base method
func (m *MockDeployment) FetchLogs(arg0 director.AllOrInstanceGroupOrInstanceSlug, arg1 []string, arg2 bool) (director.LogsResult, error) {
	ret := m.ctrl.Call(m, "FetchLogs", arg0, arg1, arg2)
	ret0, _ := ret[0].(director.LogsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLogs indicates an expected call of FetchLogs
func (mr *MockDeploymentMockRecorder) FetchLogs(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLogs", reflect.TypeOf((*MockDeployment)(nil).FetchLogs), arg0, arg1, arg2)
}

// Ignore mocks base method
func (m *MockDeployment) Ignore(arg0 director.InstanceSlug, arg1 bool) error {
	ret := m.ctrl.Call(m, "Ignore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ignore indicates an expected call of Ignore
func (mr *MockDeploymentMockRecorder) Ignore(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ignore", reflect.TypeOf((*MockDeployment)(nil).Ignore), arg0, arg1)
}

// InstanceInfos mocks base method
func (m *MockDeployment) InstanceInfos() ([]director.VMInfo, error) {
	ret := m.ctrl.Call(m, "InstanceInfos")
	ret0, _ := ret[0].([]director.VMInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceInfos indicates an expected call of InstanceInfos
func (mr *MockDeploymentMockRecorder) InstanceInfos() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceInfos", reflect.TypeOf((*MockDeployment)(nil).InstanceInfos))
}

// Instances mocks base method
func (m *MockDeployment) Instances() ([]director.Instance, error) {
	ret := m.ctrl.Call(m, "Instances")
	ret0, _ := ret[0].([]director.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Instances indicates an expected call of Instances
func (mr *MockDeploymentMockRecorder) Instances() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instances", reflect.TypeOf((*MockDeployment)(nil).Instances))
}

// Manifest mocks base method
func (m *MockDeployment) Manifest() (string, error) {
	ret := m.ctrl.Call(m, "Manifest")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Manifest indicates an expected call of Manifest
func (mr *MockDeploymentMockRecorder) Manifest() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Manifest", reflect.TypeOf((*MockDeployment)(nil).Manifest))
}

// Name mocks base method
func (m *MockDeployment) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockDeploymentMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDeployment)(nil).Name))
}

// Recreate mocks base method
func (m *MockDeployment) Recreate(arg0 director.AllOrInstanceGroupOrInstanceSlug, arg1 director.RecreateOpts) error {
	ret := m.ctrl.Call(m, "Recreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Recreate indicates an expected call of Recreate
func (mr *MockDeploymentMockRecorder) Recreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recreate", reflect.TypeOf((*MockDeployment)(nil).Recreate), arg0, arg1)
}

// Releases mocks base method
func (m *MockDeployment) Releases() ([]director.Release, error) {
	ret := m.ctrl.Call(m, "Releases")
	ret0, _ := ret[0].([]director.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Releases indicates an expected call of Releases
func (mr *MockDeploymentMockRecorder) Releases() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Releases", reflect.TypeOf((*MockDeployment)(nil).Releases))
}

// ResolveProblems mocks base method
func (m *MockDeployment) ResolveProblems(arg0 []director.ProblemAnswer) error {
	ret := m.ctrl.Call(m, "ResolveProblems", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveProblems indicates an expected call of ResolveProblems
func (mr *MockDeploymentMockRecorder) ResolveProblems(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveProblems", reflect.TypeOf((*MockDeployment)(nil).ResolveProblems), arg0)
}

// Restart mocks base method
func (m *MockDeployment) Restart(arg0 director.AllOrInstanceGroupOrInstanceSlug, arg1 director.RestartOpts) error {
	ret := m.ctrl.Call(m, "Restart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restart indicates an expected call of Restart
func (mr *MockDeploymentMockRecorder) Restart(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockDeployment)(nil).Restart), arg0, arg1)
}

// RunErrand mocks base method
func (m *MockDeployment) RunErrand(arg0 string, arg1, arg2 bool, arg3 []director.InstanceGroupOrInstanceSlug) ([]director.ErrandResult, error) {
	ret := m.ctrl.Call(m, "RunErrand", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]director.ErrandResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunErrand indicates an expected call of RunErrand
func (mr *MockDeploymentMockRecorder) RunErrand(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunErrand", reflect.TypeOf((*MockDeployment)(nil).RunErrand), arg0, arg1, arg2, arg3)
}

// ScanForProblems mocks base method
func (m *MockDeployment) ScanForProblems() ([]director.Problem, error) {
	ret := m.ctrl.Call(m, "ScanForProblems")
	ret0, _ := ret[0].([]director.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanForProblems indicates an expected call of ScanForProblems
func (mr *MockDeploymentMockRecorder) ScanForProblems() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanForProblems", reflect.TypeOf((*MockDeployment)(nil).ScanForProblems))
}

// SetUpSSH mocks base method
func (m *MockDeployment) SetUpSSH(arg0 director.AllOrInstanceGroupOrInstanceSlug, arg1 director.SSHOpts) (director.SSHResult, error) {
	ret := m.ctrl.Call(m, "SetUpSSH", arg0, arg1)
	ret0, _ := ret[0].(director.SSHResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUpSSH indicates an expected call of SetUpSSH
func (mr *MockDeploymentMockRecorder) SetUpSSH(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpSSH", reflect.TypeOf((*MockDeployment)(nil).SetUpSSH), arg0, arg1)
}

// Snapshots mocks base method
func (m *MockDeployment) Snapshots() ([]director.Snapshot, error) {
	ret := m.ctrl.Call(m, "Snapshots")
	ret0, _ := ret[0].([]director.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snapshots indicates an expected call of Snapshots
func (mr *MockDeploymentMockRecorder) Snapshots() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockDeployment)(nil).Snapshots))
}

// Start mocks base method
func (m *MockDeployment) Start(arg0 director.AllOrInstanceGroupOrInstanceSlug, arg1 director.StartOpts) error {
	ret := m.ctrl.Call(m, "Start", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockDeploymentMockRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDeployment)(nil).Start), arg0, arg1)
}

// Stemcells mocks base method
func (m *MockDeployment) Stemcells() ([]director.Stemcell, error) {
	ret := m.ctrl.Call(m, "Stemcells")
	ret0, _ := ret[0].([]director.Stemcell)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stemcells indicates an expected call of Stemcells
func (mr *MockDeploymentMockRecorder) Stemcells() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stemcells", reflect.TypeOf((*MockDeployment)(nil).Stemcells))
}

// Stop mocks base method
func (m *MockDeployment) Stop(arg0 director.AllOrInstanceGroupOrInstanceSlug, arg1 director.StopOpts) error {
	ret := m.ctrl.Call(m, "Stop", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockDeploymentMockRecorder) Stop(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDeployment)(nil).Stop), arg0, arg1)
}

// TakeSnapshot mocks base method
func (m *MockDeployment) TakeSnapshot(arg0 director.InstanceSlug) error {
	ret := m.ctrl.Call(m, "TakeSnapshot", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TakeSnapshot indicates an expected call of TakeSnapshot
func (mr *MockDeploymentMockRecorder) TakeSnapshot(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeSnapshot", reflect.TypeOf((*MockDeployment)(nil).TakeSnapshot), arg0)
}

// TakeSnapshots mocks base method
func (m *MockDeployment) TakeSnapshots() error {
	ret := m.ctrl.Call(m, "TakeSnapshots")
	ret0, _ := ret[0].(error)
	return ret0
}

// TakeSnapshots indicates an expected call of TakeSnapshots
func (mr *MockDeploymentMockRecorder) TakeSnapshots() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeSnapshots", reflect.TypeOf((*MockDeployment)(nil).TakeSnapshots))
}

// Teams mocks base method
func (m *MockDeployment) Teams() ([]string, error) {
	ret := m.ctrl.Call(m, "Teams")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Teams indicates an expected call of Teams
func (mr *MockDeploymentMockRecorder) Teams() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teams", reflect.TypeOf((*MockDeployment)(nil).Teams))
}

// Update mocks base method
func (m *MockDeployment) Update(arg0 []byte, arg1 director.UpdateOpts) error {
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDeploymentMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeployment)(nil).Update), arg0, arg1)
}

// VMInfos mocks base method
func (m *MockDeployment) VMInfos() ([]director.VMInfo, error) {
	ret := m.ctrl.Call(m, "VMInfos")
	ret0, _ := ret[0].([]director.VMInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VMInfos indicates an expected call of VMInfos
func (mr *MockDeploymentMockRecorder) VMInfos() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VMInfos", reflect.TypeOf((*MockDeployment)(nil).VMInfos))
}

// Variables mocks base method
func (m *MockDeployment) Variables() ([]director.VariableResult, error) {
	ret := m.ctrl.Call(m, "Variables")
	ret0, _ := ret[0].([]director.VariableResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Variables indicates an expected call of Variables
func (mr *MockDeploymentMockRecorder) Variables() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Variables", reflect.TypeOf((*MockDeployment)(nil).Variables))
}
