#!/usr/bin/env bash

set -ex

cleanup () {
  rm -rf "$tmpdir"
}

stemcell_version () {
  rq -y <"$manifest" | jq -r '.stemcells[0].version'
}

name () {
  echo "$1" | jq -r .name
}

url () {
  echo "$1" | jq -r .url
}

version () {
  echo "$1" | jq -r .version
}

filename () {
  echo "$(name "$1")-$(version "$1")-ubuntu-trusty-$(stemcell_version).tgz"
}


download_warden_stemcell () {
  pushd "$tmpdir"
    wget "https://s3.amazonaws.com/bosh-core-stemcells/warden/bosh-stemcell-$(stemcell_version)-warden-boshlite-ubuntu-trusty-go_agent.tgz"
  popd
}

download_compiled_releases () {
  compiled_releases="$(rq -y <"$manifest" | jq -c '.releases[] | select(has("stemcell"))')"
  for release in $compiled_releases; do
    wget "$(url "$release")" -O "$tmpdir"/releases/"$(filename "$release")"
  done
}

compilation_manifest_template="$(cat <<EOF
---
instance_groups: []
name: cf
stemcells:
- alias: default
  os: ubuntu-trusty
  version: "$(stemcell_version)"
update:
  canaries: 1
  canary_watch_time: 30000-1200000
  max_in_flight: 1
  update_watch_time: 5000-1200000
EOF
)"

compile_releases () {
    releases_to_compile="$(rq -y <"$1" | jq -c '[.releases[] | select(has("stemcell") | not)]')"
    compilation_manifest="$(echo "$compilation_manifest_template" | rq -y | jq ".releases=$releases_to_compile" | rq -Y)"
    bosh upload-stemcell "https://s3.amazonaws.com/bosh-gce-light-stemcells/light-bosh-stemcell-$(stemcell_version)-google-kvm-ubuntu-trusty-go_agent.tgz"
    bosh -n deploy -d cf <(echo "$compilation_manifest")
    for release in $(echo $releases_to_compile | jq -c .[]) ; do
        bosh -d cf export-release "$(name "$release")/$(version "$release")" ubuntu-trusty/"$(stemcell_version)" --dir "$tmpdir"
        mv "$tmpdir"/"$(name "$release")-$(version "$release")"-*.tgz "$tmpdir"/releases/"$(filename $release)"
    done
}

