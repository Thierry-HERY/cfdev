// Code generated by MockGen. DO NOT EDIT.
// Source: code.cloudfoundry.org/cfdev/cmd/stop (interfaces: Analytics)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAnalytics is a mock of Analytics interface
type MockAnalytics struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyticsMockRecorder
}

// MockAnalyticsMockRecorder is the mock recorder for MockAnalytics
type MockAnalyticsMockRecorder struct {
	mock *MockAnalytics
}

// NewMockAnalytics creates a new mock instance
func NewMockAnalytics(ctrl *gomock.Controller) *MockAnalytics {
	mock := &MockAnalytics{ctrl: ctrl}
	mock.recorder = &MockAnalyticsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAnalytics) EXPECT() *MockAnalyticsMockRecorder {
	return m.recorder
}

// Event mocks base method
func (m *MockAnalytics) Event(arg0 string, arg1 ...map[string]interface{}) error {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Event", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Event indicates an expected call of Event
func (mr *MockAnalyticsMockRecorder) Event(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockAnalytics)(nil).Event), varargs...)
}
