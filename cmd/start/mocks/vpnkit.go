// Code generated by MockGen. DO NOT EDIT.
// Source: code.cloudfoundry.org/cfdev/cmd/start (interfaces: VpnKit)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVpnKit is a mock of VpnKit interface
type MockVpnKit struct {
	ctrl     *gomock.Controller
	recorder *MockVpnKitMockRecorder
}

// MockVpnKitMockRecorder is the mock recorder for MockVpnKit
type MockVpnKitMockRecorder struct {
	mock *MockVpnKit
}

// NewMockVpnKit creates a new mock instance
func NewMockVpnKit(ctrl *gomock.Controller) *MockVpnKit {
	mock := &MockVpnKit{ctrl: ctrl}
	mock.recorder = &MockVpnKitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVpnKit) EXPECT() *MockVpnKitMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockVpnKit) Start() error {
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockVpnKitMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockVpnKit)(nil).Start))
}

// Stop mocks base method
func (m *MockVpnKit) Stop() {
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockVpnKitMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockVpnKit)(nil).Stop))
}

// Watch mocks base method
func (m *MockVpnKit) Watch(arg0 chan string) {
	m.ctrl.Call(m, "Watch", arg0)
}

// Watch indicates an expected call of Watch
func (mr *MockVpnKitMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockVpnKit)(nil).Watch), arg0)
}
