// Code generated by MockGen. DO NOT EDIT.
// Source: code.cloudfoundry.org/cfdev/cmd/start (interfaces: Launchd)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLaunchd is a mock of Launchd interface
type MockLaunchd struct {
	ctrl     *gomock.Controller
	recorder *MockLaunchdMockRecorder
}

// MockLaunchdMockRecorder is the mock recorder for MockLaunchd
type MockLaunchdMockRecorder struct {
	mock *MockLaunchd
}

// NewMockLaunchd creates a new mock instance
func NewMockLaunchd(ctrl *gomock.Controller) *MockLaunchd {
	mock := &MockLaunchd{ctrl: ctrl}
	mock.recorder = &MockLaunchdMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLaunchd) EXPECT() *MockLaunchdMockRecorder {
	return m.recorder
}

// IsRunning mocks base method
func (m *MockLaunchd) IsRunning(arg0 string) (bool, error) {
	ret := m.ctrl.Call(m, "IsRunning", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRunning indicates an expected call of IsRunning
func (mr *MockLaunchdMockRecorder) IsRunning(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockLaunchd)(nil).IsRunning), arg0)
}

// Stop mocks base method
func (m *MockLaunchd) Stop(arg0 string) error {
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockLaunchdMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockLaunchd)(nil).Stop), arg0)
}
